@page "/solutions/{SolutionId}/cards/add"
@using Project.Track.Shared.Cards
@using Project.Track.Shared.Branches
@using Project.Track.Shared.Features
@layout SolutionLayout

@inject HttpClient _httpClient;
@inject NavigationManager _navigationManager;

<h3>Create Card</h3>
<hr/>

<EditForm Model='@_model' OnValidSubmit='@HandleValidSubmit' class='form'>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class='mb-3'>
        <label for='name' class='form-label'>Name</label>
        <InputText id='name' class='form-control' @bind-Value='_model.Title' />
    </div>
    
    <div class='mb-3'>
        <label for='description' class='form-label'>Description</label>
        <InputTextArea id='description' class='form-control' @bind-Value='_model.Description' />
    </div>
    
    <div class='mb-3'>
        <label class='form-label'>Branch</label>
        <InputSelect class='form-control' @bind-Value='_model.BranchId'>
            <option value='-1'>None</option>
            @for (var index = 0; index < _branches.Count; index++)
            {
                var branch = _branches[index];
                <option value='@branch.Id'>@branch.Name</option>
            }
        </InputSelect>
    </div>
    
    <div class='mb-3'>
        <label class='form-label'>Feature</label>
        <InputSelect class='form-control' @bind-Value='_currentFeatureId'>
            <option value='-1'>None</option>
            @for (var index = 0; index < _features.Count; index++)
            {
                var feature = _features[index];
                <option value='@feature.Id'>@feature.Name</option>
            }
        </InputSelect>
        <a class='btn btn-primary' @onclick='AddFeature'>Add Feature</a>
    </div>

    <button  class='btn btn-primary' type='submit'>Submit</button>
</EditForm>

@code {
    [Parameter]
    public string SolutionId { get; set; }

    private string _currentFeatureId = string.Empty;

    private readonly CardModel _model = new();
    
    private List<GetBranchModel> _branches = new();
    private List<GetFeatureModel> _features = new();

    protected override async Task OnInitializedAsync()
    {
        _branches = await _httpClient.GetFromJsonAsync<List<GetBranchModel>>($"/api/v1/solutions/{SolutionId}/branches");
        _features = await _httpClient.GetFromJsonAsync<List<GetFeatureModel>>($"/api/v1/solutions/{SolutionId}/features");
        
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        var response = await _httpClient.PostAsJsonAsync($"/api/v1/solutions/{SolutionId}/cards", _model);
        if(response.IsSuccessStatusCode)
            _navigationManager.NavigateTo($"/solutions/{SolutionId}");
    }

    private void AddFeature()
    {
        if (_model.Features.Any(f => f == _currentFeatureId))
            return;
        _model.Features.Add(_currentFeatureId);
    }
}